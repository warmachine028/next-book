// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres", "driverAdapters"] //? https://github.com/prisma/prisma/discussions/23533#discussioncomment-8838160
    //* https://www.prisma.io/blog/prisma-optimize-early-access?utm_source=cli&utm_medium=promo-generate-v5-17&utm_campaign=--optimize
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") // env("POSTGRES_PRISMA_URL") uses connection pooling
    directUrl = env("DATABASE_URL_UNPOOLED") // env("POSTGRES_URL_NON_POOLING")  uses a direct connection
}

model User {
    id           String     @id
    userName     String     @unique
    displayName  String
    email        String?    @unique
    passwordHash String?
    googleId     String?    @unique
    avatarUrl    String?
    bio          String?
    sessions     Session[]
    posts        Post[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    likes        Like[]
    bookmarks    Bookmark[]
    comments     Comment[]

    following             Follow[]       @relation("Following")
    followers             Follow[]       @relation("Followers")
    recievedNotifications Notification[] @relation("Recipient")
    issuedNotifications   Notification[] @relation("Issuer")

    @@map("users")
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Follow {
    followerId  String
    followingId String

    follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

    @@id(name: "followId", [followerId, followingId])
    @@unique([followerId, followingId])
    @@map("follows")
}

model Post {
    id                  String         @id @default(cuid())
    content             String
    authorId            String
    attachments         Media[]
    likes               Like[]
    bookmarks           Bookmark[]
    comments            Comment[]
    linkedNotifications Notification[]

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("posts")
}

model Media {
    id     String    @id @default(cuid())
    postId String?
    url    String
    type   MediaType

    post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)

    createdAt DateTime @default(now())

    @@map("post_media")
}

enum MediaType {
    IMAGE
    VIDEO
}

model Comment {
    id       String @id @default(cuid())
    content  String
    authorId String
    postId   String

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@map("comments")
}

model Like {
    userId String
    postId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
    @@unique([userId, postId])
    @@map("likes")
}

model Bookmark {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@unique([userId, postId])
    @@map("bookmarks")
}

model Notification {
    id          String           @id @default(cuid())
    recipientId String
    isssuerId   String
    postId      String?
    type        NotificationType
    read        Boolean          @default(false)

    recipient User  @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
    issuer    User  @relation("Issuer", fields: [isssuerId], references: [id], onDelete: Cascade)
    post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@map("notifications")
}

enum NotificationType {
    LIKE
    FOLLOW
    COMMENT
}
